{"ast":null,"code":"var _jsxFileName = \"/Users/mesut/Projects/TodoApp/TodoApp/ClientApp/src/pages/TodoList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport todoService from '../services/TodoService';\nimport TodoEntity from '../models/TodoEntity';\nimport { Checkbox, Dialog, DialogActions, DialogContent, Button } from '@mui/material';\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteConfirmationDialog from '../components/DeleteConfirmationDialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = () => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const fetchedTodos = await todoService.getTodos();\n        setTodos(fetchedTodos);\n      } catch (error) {\n        console.error('Todo verileri çekilirken hata oluştu:', error);\n      }\n    };\n    fetchTodos();\n  }, []);\n  const handleConfirmDelete = async () => {\n    debugger;\n    if (selectedTodoId) {\n      await todoService.deleteTodo(selectedTodoId);\n    }\n    setSelectedTodoId(null);\n    setDialogOpen(false);\n    fetchTodos();\n  };\n  const columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 70\n  }, {\n    field: 'title',\n    headerName: 'Başlık',\n    width: 250\n  }, {\n    field: 'description',\n    headerName: 'Açıklama',\n    width: 250\n  }, {\n    field: 'isCompleted',\n    headerName: 'Tamamlandı',\n    width: 120,\n    renderCell: params => /*#__PURE__*/_jsxDEV(Checkbox, {\n      disabled: true,\n      checked: params.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this)\n  }, {\n    field: 'actions',\n    headerName: 'İşlemler',\n    width: 250,\n    renderCell: params => /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"primary\",\n        children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"secondary\",\n        onClick: () => {\n          setSelectedTodoId(params.row.id);\n          setDialogOpen(true);\n        },\n        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 400,\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: todos,\n      columns: columns,\n      pageSize: 5,\n      disableSelectionOnClick: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DeleteConfirmationDialog, {\n      open: dialogOpen,\n      onClose: () => setDialogOpen(false),\n      onConfirm: handleConfirmDelete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n\n// const columns: GridColDef[] = [\n//   { field: 'id', headerName: 'ID', width: 90 },\n//   {\n//     field: 'firstName',\n//     headerName: 'First name',\n//     width: 150,\n//     editable: true,\n//   },\n//   {\n//     field: 'lastName',\n//     headerName: 'Last name',\n//     width: 150,\n//     editable: true,\n//   },\n//   {\n//     field: 'age',\n//     headerName: 'Age',\n//     type: 'number',\n//     width: 110,\n//     editable: true,\n//   },\n//   {\n//     field: 'fullName',\n//     headerName: 'Full name',\n//     description: 'This column has a value getter and is not sortable.',\n//     sortable: false,\n//     width: 160,\n//     valueGetter: (params: GridValueGetterParams) =>\n//       `${params.row.firstName || ''} ${params.row.lastName || ''}`,\n//   },\n// ];\n\n// const rows = [\n//   { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n//   { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n//   { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n//   { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n//   { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n//   { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n//   { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n//   { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n//   { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n// ];\n\n// return (\n//   <Box sx={{ height: 400, width: '100%' }}>\n//     <DataGrid\n//       rows={rows}\n//       columns={columns}\n//       initialState={{\n//         pagination: {\n//           paginationModel: {\n//             pageSize: 5,\n//           },\n//         },\n//       }}\n//       pageSizeOptions={[5]}\n//       checkboxSelection\n//       disableRowSelectionOnClick\n//     />\n//   </Box>\n// );\n// };\n_s(TodoList, \"tYnNTuIGgN/kq7TBMsY6abRm8Oo=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useEffect","useState","todoService","TodoEntity","Checkbox","Dialog","DialogActions","DialogContent","Button","DataGrid","GridColDef","GridValueGetterParams","Box","IconButton","DeleteIcon","EditIcon","DeleteConfirmationDialog","jsxDEV","_jsxDEV","TodoList","_s","todos","setTodos","dialogOpen","setDialogOpen","selectedTodoId","setSelectedTodoId","fetchTodos","fetchedTodos","getTodos","error","console","handleConfirmDelete","deleteTodo","columns","field","headerName","width","renderCell","params","disabled","checked","value","fileName","_jsxFileName","lineNumber","columnNumber","children","color","onClick","row","id","sx","height","rows","pageSize","disableSelectionOnClick","open","onClose","onConfirm","_c","$RefreshReg$"],"sources":["/Users/mesut/Projects/TodoApp/TodoApp/ClientApp/src/pages/TodoList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport todoService from '../services/TodoService';\nimport TodoEntity from '../models/TodoEntity';\nimport { Checkbox, Dialog, DialogActions, DialogContent, Button } from '@mui/material';\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteConfirmationDialog from '../components/DeleteConfirmationDialog';\n\nconst TodoList = () => {\n  const [todos, setTodos] = useState([]);\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState(null);\n\n  useEffect(() => {\n\n    const fetchTodos = async () => {\n      try {\n        const fetchedTodos = await todoService.getTodos();\n        setTodos(fetchedTodos);\n      } catch (error) {\n        console.error('Todo verileri çekilirken hata oluştu:', error);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const handleConfirmDelete = async () => {\n\n    debugger;\n    \n    if (selectedTodoId) {\n      await todoService.deleteTodo(selectedTodoId);\n    }\n    setSelectedTodoId(null);\n    setDialogOpen(false);\n    fetchTodos();\n  };\n\n  const columns: GridColDef[] = [\n    { field: 'id', headerName: 'ID', width: 70 },\n    { field: 'title', headerName: 'Başlık', width: 250 },\n    { field: 'description', headerName: 'Açıklama', width: 250 },\n    {\n      field: 'isCompleted',\n      headerName: 'Tamamlandı',\n      width: 120,\n      renderCell: (params) => (\n        <Checkbox disabled checked={params.value} />\n      ),\n    },\n    {\n      field: 'actions',\n      headerName: 'İşlemler',\n      width: 250,\n      renderCell: (params) => (\n        <Box>\n          <IconButton color=\"primary\">\n            <EditIcon />\n          </IconButton>\n          <IconButton\n            color=\"secondary\"\n            onClick={() => {\n              setSelectedTodoId(params.row.id);\n              setDialogOpen(true);\n            }}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Box>\n      ),\n    },\n  ];\n\n  return (\n    <Box sx={{ height: 400, width: '100%' }}>\n      <DataGrid rows={todos} columns={columns} pageSize={5} disableSelectionOnClick />\n\n      <DeleteConfirmationDialog\n        open={dialogOpen}\n        onClose={() => setDialogOpen(false)}\n        onConfirm={handleConfirmDelete}/>\n    </Box>\n  );\n};\n\n// const columns: GridColDef[] = [\n//   { field: 'id', headerName: 'ID', width: 90 },\n//   {\n//     field: 'firstName',\n//     headerName: 'First name',\n//     width: 150,\n//     editable: true,\n//   },\n//   {\n//     field: 'lastName',\n//     headerName: 'Last name',\n//     width: 150,\n//     editable: true,\n//   },\n//   {\n//     field: 'age',\n//     headerName: 'Age',\n//     type: 'number',\n//     width: 110,\n//     editable: true,\n//   },\n//   {\n//     field: 'fullName',\n//     headerName: 'Full name',\n//     description: 'This column has a value getter and is not sortable.',\n//     sortable: false,\n//     width: 160,\n//     valueGetter: (params: GridValueGetterParams) =>\n//       `${params.row.firstName || ''} ${params.row.lastName || ''}`,\n//   },\n// ];\n\n// const rows = [\n//   { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n//   { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n//   { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n//   { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n//   { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n//   { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n//   { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n//   { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n//   { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n// ];\n\n// return (\n//   <Box sx={{ height: 400, width: '100%' }}>\n//     <DataGrid\n//       rows={rows}\n//       columns={columns}\n//       initialState={{\n//         pagination: {\n//           paginationModel: {\n//             pageSize: 5,\n//           },\n//         },\n//       }}\n//       pageSizeOptions={[5]}\n//       checkboxSelection\n//       disableRowSelectionOnClick\n//     />\n//   </Box>\n// );\n// };\nexport default TodoList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}