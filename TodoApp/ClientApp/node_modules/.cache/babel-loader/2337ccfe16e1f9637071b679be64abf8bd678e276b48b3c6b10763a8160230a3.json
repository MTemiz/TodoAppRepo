{"ast":null,"code":"var _jsxFileName = \"/Users/mesut/Projects/TodoApp/TodoApp/ClientApp/src/pages/TodoList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport todoService from '../services/TodoService';\nimport TodoEntity from '../models/TodoEntity';\nimport { Checkbox, Dialog, DialogActions, DialogContent, Button } from '@mui/material';\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteConfirmationDialog from '../components/DeleteConfirmationDialog';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = () => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const fetchedTodos = await todoService.getTodos();\n        setTodos(fetchedTodos);\n      } catch (error) {\n        console.error('Todo verileri çekilirken hata oluştu:', error);\n      }\n    };\n    fetchTodos();\n  }, []);\n  const handleDelete = id => {\n    // Silme işlemini gerçekleştirin\n  };\n  const columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 70\n  }, {\n    field: 'title',\n    headerName: 'Başlık',\n    width: 250\n  }, {\n    field: 'description',\n    headerName: 'Açıklama',\n    width: 250\n  }, {\n    field: 'isCompleted',\n    headerName: 'Tamamlandı',\n    width: 120,\n    renderCell: params => /*#__PURE__*/_jsxDEV(Checkbox, {\n      disabled: true,\n      checked: params.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this)\n  }, {\n    field: 'actions',\n    headerName: 'İşlemler',\n    width: 250,\n    renderCell: params => /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"primary\",\n        children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n        color: \"secondary\",\n        onClick: () => handleDelete(params.row.id),\n        children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 11\n    }, this)\n  }];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 400,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: todos,\n      columns: columns,\n      pageSize: 5,\n      disableSelectionOnClick: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 7\n  }, this);\n};\n\n// const columns: GridColDef[] = [\n//   { field: 'id', headerName: 'ID', width: 90 },\n//   {\n//     field: 'firstName',\n//     headerName: 'First name',\n//     width: 150,\n//     editable: true,\n//   },\n//   {\n//     field: 'lastName',\n//     headerName: 'Last name',\n//     width: 150,\n//     editable: true,\n//   },\n//   {\n//     field: 'age',\n//     headerName: 'Age',\n//     type: 'number',\n//     width: 110,\n//     editable: true,\n//   },\n//   {\n//     field: 'fullName',\n//     headerName: 'Full name',\n//     description: 'This column has a value getter and is not sortable.',\n//     sortable: false,\n//     width: 160,\n//     valueGetter: (params: GridValueGetterParams) =>\n//       `${params.row.firstName || ''} ${params.row.lastName || ''}`,\n//   },\n// ];\n\n// const rows = [\n//   { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n//   { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n//   { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n//   { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n//   { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n//   { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n//   { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n//   { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n//   { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n// ];\n\n// return (\n//   <Box sx={{ height: 400, width: '100%' }}>\n//     <DataGrid\n//       rows={rows}\n//       columns={columns}\n//       initialState={{\n//         pagination: {\n//           paginationModel: {\n//             pageSize: 5,\n//           },\n//         },\n//       }}\n//       pageSizeOptions={[5]}\n//       checkboxSelection\n//       disableRowSelectionOnClick\n//     />\n//   </Box>\n// );\n// };\n_s(TodoList, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useEffect","useState","todoService","TodoEntity","Checkbox","Dialog","DialogActions","DialogContent","Button","DataGrid","GridColDef","GridValueGetterParams","Box","IconButton","DeleteIcon","EditIcon","DeleteConfirmationDialog","jsxDEV","_jsxDEV","TodoList","_s","todos","setTodos","fetchTodos","fetchedTodos","getTodos","error","console","handleDelete","id","columns","field","headerName","width","renderCell","params","disabled","checked","value","fileName","_jsxFileName","lineNumber","columnNumber","children","color","onClick","row","sx","height","rows","pageSize","disableSelectionOnClick","_c","$RefreshReg$"],"sources":["/Users/mesut/Projects/TodoApp/TodoApp/ClientApp/src/pages/TodoList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport todoService from '../services/TodoService';\nimport TodoEntity from '../models/TodoEntity';\nimport { Checkbox, Dialog, DialogActions, DialogContent, Button } from '@mui/material';\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\nimport Box from '@mui/material/Box';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport DeleteConfirmationDialog from '../components/DeleteConfirmationDialog'\n\nconst TodoList = () => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n\n    const fetchTodos = async () => {\n      try {\n        const fetchedTodos = await todoService.getTodos();\n        setTodos(fetchedTodos);\n      } catch (error) {\n        console.error('Todo verileri çekilirken hata oluştu:', error);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const handleDelete = (id) => {\n    // Silme işlemini gerçekleştirin\n  };\n\n    const columns: GridColDef[] = [\n      { field: 'id', headerName: 'ID', width: 70 },\n      { field: 'title', headerName: 'Başlık', width: 250 },\n      { field: 'description', headerName: 'Açıklama', width: 250 },\n      {\n        field: 'isCompleted',\n        headerName: 'Tamamlandı',\n        width: 120,\n        renderCell: (params) => (\n          <Checkbox disabled checked={params.value} />\n        ),\n      },\n      {\n        field: 'actions',\n        headerName: 'İşlemler',\n        width: 250,\n        renderCell: (params) => (\n          <Box>\n          <IconButton color=\"primary\">\n            <EditIcon />\n          </IconButton>\n          <IconButton\n            color=\"secondary\"\n            onClick={() => handleDelete(params.row.id)}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </Box>\n        ),\n      },\n    ];\n\n    return (\n      <Box sx={{ height: 400, width: '100%' }}>\n        <DataGrid rows={todos} columns={columns} pageSize={5} disableSelectionOnClick />\n      </Box>\n    );\n  };\n\n  // const columns: GridColDef[] = [\n  //   { field: 'id', headerName: 'ID', width: 90 },\n  //   {\n  //     field: 'firstName',\n  //     headerName: 'First name',\n  //     width: 150,\n  //     editable: true,\n  //   },\n  //   {\n  //     field: 'lastName',\n  //     headerName: 'Last name',\n  //     width: 150,\n  //     editable: true,\n  //   },\n  //   {\n  //     field: 'age',\n  //     headerName: 'Age',\n  //     type: 'number',\n  //     width: 110,\n  //     editable: true,\n  //   },\n  //   {\n  //     field: 'fullName',\n  //     headerName: 'Full name',\n  //     description: 'This column has a value getter and is not sortable.',\n  //     sortable: false,\n  //     width: 160,\n  //     valueGetter: (params: GridValueGetterParams) =>\n  //       `${params.row.firstName || ''} ${params.row.lastName || ''}`,\n  //   },\n  // ];\n\n  // const rows = [\n  //   { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n  //   { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n  //   { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n  //   { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n  //   { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n  //   { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n  //   { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n  //   { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n  //   { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n  // ];\n\n  // return (\n  //   <Box sx={{ height: 400, width: '100%' }}>\n  //     <DataGrid\n  //       rows={rows}\n  //       columns={columns}\n  //       initialState={{\n  //         pagination: {\n  //           paginationModel: {\n  //             pageSize: 5,\n  //           },\n  //         },\n  //       }}\n  //       pageSizeOptions={[5]}\n  //       checkboxSelection\n  //       disableRowSelectionOnClick\n  //     />\n  //   </Box>\n  // );\n// };\nexport default TodoList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,yBAAyB;AACjD,OAAOC,UAAU,MAAM,sBAAsB;AAC7C,SAASC,QAAQ,EAAEC,MAAM,EAAEC,aAAa,EAAEC,aAAa,EAAEC,MAAM,QAAQ,eAAe;AACtF,SAASC,QAAQ,EAAEC,UAAU,EAAEC,qBAAqB,QAAQ,kBAAkB;AAC9E,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,wBAAwB,MAAM,wCAAwC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE7E,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IAEd,MAAMuB,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,YAAY,GAAG,MAAMtB,WAAW,CAACuB,QAAQ,CAAC,CAAC;QACjDH,QAAQ,CAACE,YAAY,CAAC;MACxB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;MAC/D;IACF,CAAC;IAEDH,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,YAAY,GAAIC,EAAE,IAAK;IAC3B;EAAA,CACD;EAEC,MAAMC,OAAqB,GAAG,CAC5B;IAAEC,KAAK,EAAE,IAAI;IAAEC,UAAU,EAAE,IAAI;IAAEC,KAAK,EAAE;EAAG,CAAC,EAC5C;IAAEF,KAAK,EAAE,OAAO;IAAEC,UAAU,EAAE,QAAQ;IAAEC,KAAK,EAAE;EAAI,CAAC,EACpD;IAAEF,KAAK,EAAE,aAAa;IAAEC,UAAU,EAAE,UAAU;IAAEC,KAAK,EAAE;EAAI,CAAC,EAC5D;IACEF,KAAK,EAAE,aAAa;IACpBC,UAAU,EAAE,YAAY;IACxBC,KAAK,EAAE,GAAG;IACVC,UAAU,EAAGC,MAAM,iBACjBjB,OAAA,CAACd,QAAQ;MAACgC,QAAQ;MAACC,OAAO,EAAEF,MAAM,CAACG;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAE/C,CAAC,EACD;IACEX,KAAK,EAAE,SAAS;IAChBC,UAAU,EAAE,UAAU;IACtBC,KAAK,EAAE,GAAG;IACVC,UAAU,EAAGC,MAAM,iBACjBjB,OAAA,CAACN,GAAG;MAAA+B,QAAA,gBACJzB,OAAA,CAACL,UAAU;QAAC+B,KAAK,EAAC,SAAS;QAAAD,QAAA,eACzBzB,OAAA,CAACH,QAAQ;UAAAwB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eACbxB,OAAA,CAACL,UAAU;QACT+B,KAAK,EAAC,WAAW;QACjBC,OAAO,EAAEA,CAAA,KAAMjB,YAAY,CAACO,MAAM,CAACW,GAAG,CAACjB,EAAE,CAAE;QAAAc,QAAA,eAE3CzB,OAAA,CAACJ,UAAU;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV;EAEP,CAAC,CACF;EAED,oBACExB,OAAA,CAACN,GAAG;IAACmC,EAAE,EAAE;MAAEC,MAAM,EAAE,GAAG;MAAEf,KAAK,EAAE;IAAO,CAAE;IAAAU,QAAA,eACtCzB,OAAA,CAACT,QAAQ;MAACwC,IAAI,EAAE5B,KAAM;MAACS,OAAO,EAAEA,OAAQ;MAACoB,QAAQ,EAAE,CAAE;MAACC,uBAAuB;IAAA;MAAAZ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7E,CAAC;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AAAAtB,EAAA,CA1HMD,QAAQ;AAAAiC,EAAA,GAARjC,QAAQ;AA2Hd,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}