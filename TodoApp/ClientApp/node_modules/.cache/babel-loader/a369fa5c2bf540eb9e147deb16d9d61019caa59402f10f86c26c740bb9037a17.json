{"ast":null,"code":"var _jsxFileName = \"/Users/mesut/Projects/TodoApp/TodoApp/ClientApp/src/pages/TodoList.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport todoService from '../services/TodoService';\nimport TodoEntity from '../models/TodoEntity';\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TodoList = () => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        const fetchedTodos = await todoService.getTodos();\n        setTodos(fetchedTodos);\n      } catch (error) {\n        console.error('Todo verileri çekilirken hata oluştu:', error);\n      }\n    };\n    fetchTodos();\n  }, []);\n  const handleDelete = id => {\n    // Silme işlemini gerçekleştirin\n  };\n\n  //   const columns: GridColDef[] = [\n  //     { field: 'id', headerName: 'ID', width: 70 },\n  //     { field: 'title', headerName: 'Başlık', width: 250 },\n  //     {\n  //       field: 'isCompleted',\n  //       headerName: 'Tamamlandı',\n  //       width: 120,\n  //       renderCell: (params) => (\n  //         <Button variant=\"outlined\" color={params.value ? 'primary' : 'secondary'}>\n  //           {params.value ? 'Evet' : 'Hayır'}\n  //         </Button>\n  //       ),\n  //     },\n  //     {\n  //       field: 'actions',\n  //       headerName: 'İşlemler',\n  //       width: 150,\n  //       renderCell: (params) => (\n  //         <div>\n  //           <Button variant=\"outlined\" color=\"primary\">\n  //             Düzenle\n  //           </Button>\n  //           <Button variant=\"outlined\" color=\"secondary\" onClick={() => handleDelete(params.row.id)}>\n  //             Sil\n  //           </Button>\n  //         </div>\n  //       ),\n  //     },\n  //   ];\n\n  //   return (\n  //     <div style={{ height: 400, width: '100%' }}>\n  //       <DataGrid rows={todos} columns={columns} pageSize={5} disableSelectionOnClick />\n  //     </div>\n  //   );\n  // };\n\n  const columns = [{\n    field: 'id',\n    headerName: 'ID',\n    width: 90\n  }, {\n    field: 'firstName',\n    headerName: 'First name',\n    width: 150,\n    editable: true\n  }, {\n    field: 'lastName',\n    headerName: 'Last name',\n    width: 150,\n    editable: true\n  }, {\n    field: 'age',\n    headerName: 'Age',\n    type: 'number',\n    width: 110,\n    editable: true\n  }, {\n    field: 'fullName',\n    headerName: 'Full name',\n    description: 'This column has a value getter and is not sortable.',\n    sortable: false,\n    width: 160,\n    valueGetter: params => `${params.row.firstName || ''} ${params.row.lastName || ''}`\n  }];\n  const rows = [{\n    id: 1,\n    lastName: 'Snow',\n    firstName: 'Jon',\n    age: 35\n  }, {\n    id: 2,\n    lastName: 'Lannister',\n    firstName: 'Cersei',\n    age: 42\n  }, {\n    id: 3,\n    lastName: 'Lannister',\n    firstName: 'Jaime',\n    age: 45\n  }, {\n    id: 4,\n    lastName: 'Stark',\n    firstName: 'Arya',\n    age: 16\n  }, {\n    id: 5,\n    lastName: 'Targaryen',\n    firstName: 'Daenerys',\n    age: null\n  }, {\n    id: 6,\n    lastName: 'Melisandre',\n    firstName: null,\n    age: 150\n  }, {\n    id: 7,\n    lastName: 'Clifford',\n    firstName: 'Ferrara',\n    age: 44\n  }, {\n    id: 8,\n    lastName: 'Frances',\n    firstName: 'Rossini',\n    age: 36\n  }, {\n    id: 9,\n    lastName: 'Roxie',\n    firstName: 'Harvey',\n    age: 65\n  }];\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      height: 300,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      initialState: {\n        pagination: {\n          paginationModel: {\n            pageSize: 5\n          }\n        }\n      },\n      pageSizeOptions: [5],\n      checkboxSelection: true,\n      disableRowSelectionOnClick: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this);\n};\n_s(TodoList, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useEffect","useState","todoService","TodoEntity","DataGrid","GridColDef","GridValueGetterParams","Button","Box","jsxDEV","_jsxDEV","TodoList","_s","todos","setTodos","fetchTodos","fetchedTodos","getTodos","error","console","handleDelete","id","columns","field","headerName","width","editable","type","description","sortable","valueGetter","params","row","firstName","lastName","rows","age","sx","height","children","initialState","pagination","paginationModel","pageSize","pageSizeOptions","checkboxSelection","disableRowSelectionOnClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mesut/Projects/TodoApp/TodoApp/ClientApp/src/pages/TodoList.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport todoService from '../services/TodoService';\nimport TodoEntity from '../models/TodoEntity';\nimport { DataGrid, GridColDef, GridValueGetterParams } from '@mui/x-data-grid';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\n\nconst TodoList = () => {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n\n    const fetchTodos = async () => {\n      try {\n        const fetchedTodos = await todoService.getTodos();\n        setTodos(fetchedTodos);\n      } catch (error) {\n        console.error('Todo verileri çekilirken hata oluştu:', error);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const handleDelete = (id) => {\n    // Silme işlemini gerçekleştirin\n  };\n\n  //   const columns: GridColDef[] = [\n  //     { field: 'id', headerName: 'ID', width: 70 },\n  //     { field: 'title', headerName: 'Başlık', width: 250 },\n  //     {\n  //       field: 'isCompleted',\n  //       headerName: 'Tamamlandı',\n  //       width: 120,\n  //       renderCell: (params) => (\n  //         <Button variant=\"outlined\" color={params.value ? 'primary' : 'secondary'}>\n  //           {params.value ? 'Evet' : 'Hayır'}\n  //         </Button>\n  //       ),\n  //     },\n  //     {\n  //       field: 'actions',\n  //       headerName: 'İşlemler',\n  //       width: 150,\n  //       renderCell: (params) => (\n  //         <div>\n  //           <Button variant=\"outlined\" color=\"primary\">\n  //             Düzenle\n  //           </Button>\n  //           <Button variant=\"outlined\" color=\"secondary\" onClick={() => handleDelete(params.row.id)}>\n  //             Sil\n  //           </Button>\n  //         </div>\n  //       ),\n  //     },\n  //   ];\n\n  //   return (\n  //     <div style={{ height: 400, width: '100%' }}>\n  //       <DataGrid rows={todos} columns={columns} pageSize={5} disableSelectionOnClick />\n  //     </div>\n  //   );\n  // };\n\n  const columns: GridColDef[] = [\n    { field: 'id', headerName: 'ID', width: 90 },\n    {\n      field: 'firstName',\n      headerName: 'First name',\n      width: 150,\n      editable: true,\n    },\n    {\n      field: 'lastName',\n      headerName: 'Last name',\n      width: 150,\n      editable: true,\n    },\n    {\n      field: 'age',\n      headerName: 'Age',\n      type: 'number',\n      width: 110,\n      editable: true,\n    },\n    {\n      field: 'fullName',\n      headerName: 'Full name',\n      description: 'This column has a value getter and is not sortable.',\n      sortable: false,\n      width: 160,\n      valueGetter: (params: GridValueGetterParams) =>\n        `${params.row.firstName || ''} ${params.row.lastName || ''}`,\n    },\n  ];\n\n  const rows = [\n    { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\n    { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\n    { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\n    { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\n    { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\n    { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\n    { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\n    { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\n    { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\n  ];\n\n  return (\n    <Box sx={{ height: 300, width: '100%' }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        initialState={{\n          pagination: {\n            paginationModel: {\n              pageSize: 5,\n            },\n          },\n        }}\n        pageSizeOptions={[5]}\n        checkboxSelection\n        disableRowSelectionOnClick\n      />\n    </Box>\n  );\n};\nexport default TodoList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}